import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import type { UserCreateDto } from "@/interfaces/User_interface";
import { Checkbox } from "@/components/ui/checkbox";
import { Atom } from "react-loading-indicators";
import type { RoleDto } from "@/interfaces/Roles_interface";
import { useAuth } from "@/route_protection/AuthContext";
import { getRoles } from "@/api/Roles_api";
import { createUser, getLastUserId } from "@/api/Users_api";
import { generateRandomPassword } from "./PasswordGenerator";
import { sendMail } from "@/api/Email_api";

/**
 * @interface LastId
 * @description Represents the last user ID received from the API.
 * @property {string | null} user_id - The last user ID.
 */
export interface LastId{
    user_id: string | null;
}

/**
 * @component AddUser
 * @description A component for creating new users.
 * @returns {JSX.Element} The AddUser component.
 */
const AddUser = () => {
  // State for holding the new user's data.
  const [userData, setUserData] = useState<UserCreateDto>({
    name: "",
    email: "",
    user_id: "",
    password: generateRandomPassword(), // Default password, likely to be changed or generated by backend
  });

  // State for storing all available roles.
  const [allRoles, setAllRoles] = useState<RoleDto[]>([]);
  // State for storing roles selected for the new user.
  const [selectedRoles, setSelectedRoles] = useState<RoleDto[]>([]);
  // State for error handling.
  const [error, setError] = useState<string | null>(null);
  // State for loading indicator.
  const [loading, setLoading] = useState<boolean>(true);

  // Get user authentication context
  const { user } = useAuth();

  /**
   * Fetches initial data (roles and last user ID) on component mount.
   */
  useEffect(() => {
    /**
     * Fetches roles from the API.
     */
    const fetchData = async () => {
      setError(null);
      setLoading(true);
      try {
        // Check if user is logged in
        if (!user) {
          setError("No user logged in");
          return;
        }
        // Check if user token is available
        if (!user.token) {
          setError("No token found for the logged-in user.");
          return;
        }

        // Fetch roles using the API
        const roles = await getRoles();
        setAllRoles(roles);
      } catch (err: any) {
        setError(err.message || "Failed to fetch roles data.");
      } finally {
        setLoading(false);
      }
    };

    /**
     * Gets the next available user ID.
     */
    const getNextUserId = async () => {
      setError(null);
      setLoading(true);
      try {
        // Check if user is logged in
        if (!user) {
          setError("No user logged in");
          return;
        }
        // Check if user token is available
        if (!user.token) {
          setError("No token found for the logged-in user.");
          return;
        }
        // Fetch the last user ID from the API
        const lastUserId = await getLastUserId(user.token);
        // Validate the format of the last user ID
        if (!lastUserId.user_id || !lastUserId.user_id.startsWith("USER")) {
          throw new Error("Invalid user ID format");
        }

        // Extract the numeric part of the user ID
        const numberPart = lastUserId.user_id.slice(4);

        // Calculate the next user ID number
        const nextNumber = parseInt(numberPart, 10) + 1;

        // Pad the number with leading zeros to maintain format (e.g., USER0001)
        const paddedNumber = nextNumber.toString().padStart(4, "0");

        // Update the userData state with the new user ID
        setUserData((prev) => ({
          ...prev,
          user_id: "USER"+paddedNumber,
        }));
      } catch (err: any) {
        setError(err.message || "Failed to fetch last user ID.");
      } finally {
        setLoading(false);
      }
    };

    // Call the data fetching functions
    fetchData();
    getNextUserId();
  }, []); // Empty dependency array ensures this runs only once on mount

  /**
   * Handles the form submission to create a new user.
   */
  const handleSubmit = async () => {
    setError(null);
    setLoading(true);

    // Validate user authentication and token presence
    if (!user || !user.token) {
      setError("No authenticated user or token.");
      setLoading(false);
      return;
    }

    // Validate all required fields are filled
    if (!userData.name || !userData.email || !userData.user_id || !userData.password) {
      setError("All fields are required.");
      setLoading(false);
      return;
    }

    try {
      // Call the API to create the user
      await createUser(userData, selectedRoles, user.token);
      alert("User created successfully!"); // Show success message
      sendMail(userData?.email, "User Account Creted in Roima's Dashboard", "Welcome! Your passowrd is ("+userData.password+") Please don't share with anyone.",  user.token);
    } catch (error: any) {
      setError(error.message); // Display error message
    } finally {
      setLoading(false);
    }
  };

  // Display loading indicator while data is being fetched
  if (loading) {
    return (
      <Card className="w-full h-full p-4 flex justify-center items-center">
        <Atom color="#000000" size="medium" text="Loading..." textColor="" />
      </Card>
    );
  }

  // Display error message if an error occurred
  if (error) {
    return (
      <div className="flex items-center justify-center w-full h-full text-red-500">
        Error: {error}
      </div>
    );
  }

  // Render the add user form
  return (
    <Card className="bg-white text-gray-800 font-sans border-none shadow-md border-2">
      <div className="container mx-auto px-4 py-4">
        <div className="bg-white rounded-lg borde p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-6">
            Profile Details
          </h2>

          <form
            onSubmit={(e) => {
              e.preventDefault(); // Prevent default form submission behavior
              handleSubmit(); // Call custom submit handler
            }}
          >
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label
                  htmlFor="name"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  Name
                </label>
                <input
                  type="text"
                  id="name"
                  className="border block w-full bg-white border-gray-300 rounded-md text-gray-900 focus:ring-gray-500 focus:border-gray-500 sm:text-sm h-10 px-3"
                  value={userData.name}
                  onChange={(e) =>
                    setUserData((prev) => ({ ...prev, name: e.target.value }))
                  }
                  required
                />
              </div>

              <div>
                <label
                  htmlFor="email"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  className="border block w-full bg-white border-gray-300 rounded-md text-gray-900 focus:ring-gray-500 focus:border-gray-500 sm:text-sm h-10 px-3"
                  value={userData.email}
                  onChange={(e) =>
                    setUserData((prev) => ({ ...prev, email: e.target.value }))
                  }
                  required
                />
              </div>

              <div>
                <label
                  htmlFor="employee-id"
                  className="block text-sm font-medium text-gray-700 mb-2"
                >
                  Employee ID
                </label>
                <input
                  type="text"
                  id="employee-id"
                  className="border block w-full bg-white border-gray-300 rounded-md text-gray-900 focus:ring-gray-500 focus:border-gray-500 sm:text-sm h-10 px-3"
                  value={userData.user_id}
                  onChange={(e) =>
                    setUserData((prev) => ({
                      ...prev,
                      user_id: e.target.value,
                    }))
                  }
                  required
                />
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Roles
                </label>
                <div className="space-y-2 flex flex-row flex-wrap gap-4">
                  {allRoles.map((role) => (
                    <div
                      key={role.role_id}
                      className="flex items-center space-x-2"
                    >
                      <Checkbox
                        id={`role-${role.role_id}`}
                        checked={selectedRoles.some(
                          (r) => r.role_id === role.role_id
                        )}
                        onCheckedChange={(checked) => {
                          const isChecked = checked as boolean;
                          if (isChecked) {
                            setSelectedRoles((prev) => [...prev, role]); // Add role if checked
                          } else {
                            setSelectedRoles((prev) =>
                              prev.filter((r) => r.role_id !== role.role_id) // Remove role if unchecked
                            );
                          }
                        }}
                      />
                      <label
                        htmlFor={`role-${role.role_id}`}
                        className="text-sm font-medium"
                      >
                        {role.role_name}
                      </label>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <div className="mt-8 flex justify-end">
              <Button
                type="submit"
                variant="outline"
                className="bg-gray-500 text-white hover:bg-black hover:text-white duration-300 cursor-pointer"
              >
                Add User
              </Button>
            </div>
          </form>
        </div>
      </div>
    </Card>
  );
};

export default AddUser;